/**
 * generated by Xtext
 */
package org.slf.generator;

import com.google.common.base.Objects;
import com.google.common.collect.Iterables;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.IFileSystemAccess;
import org.eclipse.xtext.generator.IGenerator;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.slf.iot.AbstractElement;
import org.slf.iot.BoolConstant;
import org.slf.iot.Dispositivo;
import org.slf.iot.Estado;
import org.slf.iot.Etiqueta;
import org.slf.iot.Evento;
import org.slf.iot.Expression;
import org.slf.iot.IntConstant;
import org.slf.iot.StringConstant;
import org.slf.iot.Transicion;
import org.slf.iot.Variable;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class IotGenerator implements IGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess fsa) {
    TreeIterator<EObject> _allContents = resource.getAllContents();
    Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(_allContents);
    Iterable<Dispositivo> _filter = Iterables.<Dispositivo>filter(_iterable, Dispositivo.class);
    for (final Dispositivo e : _filter) {
      {
        String _name = e.getName();
        String _plus = ("iot/" + _name);
        String _plus_1 = (_plus + ".java");
        CharSequence _compile = this.compile(e);
        fsa.generateFile(_plus_1, _compile);
        String _name_1 = e.getName();
        String _plus_2 = ("interfaces/" + _name_1);
        String _plus_3 = (_plus_2 + "I.java");
        CharSequence _compileI = this.compileI(e);
        fsa.generateFile(_plus_3, _compileI);
      }
    }
  }
  
  public CharSequence compile(final Dispositivo dispositivo) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\t");
    _builder.append("package iot;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("import interfaces.*;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public class ");
    String _name = dispositivo.getName();
    _builder.append(_name, "\t");
    _builder.append(" ");
    {
      Dispositivo _superType = dispositivo.getSuperType();
      boolean _notEquals = (!Objects.equal(_superType, null));
      if (_notEquals) {
        _builder.append("extends ");
        Dispositivo _superType_1 = dispositivo.getSuperType();
        String _name_1 = _superType_1.getName();
        _builder.append(_name_1, "\t");
        _builder.append(" ");
      }
    }
    _builder.append("{");
    _builder.newLineIfNotEmpty();
    {
      EList<Etiqueta> _etiquetas = dispositivo.getEtiquetas();
      for(final Etiqueta etiqueta : _etiquetas) {
        _builder.append("\t\t");
        _builder.append("public static final String ");
        String _name_2 = etiqueta.getName();
        _builder.append(_name_2, "\t\t");
        _builder.append(" = \"");
        String _value = etiqueta.getValue();
        _builder.append(_value, "\t\t");
        _builder.append("\";");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("enum Eventos{");
    _builder.newLine();
    {
      EList<Evento> _eventos = dispositivo.getEventos();
      for(final Evento evento : _eventos) {
        _builder.append("\t\t\t");
        String _name_3 = evento.getName();
        _builder.append(_name_3, "\t\t\t");
        _builder.append(", ");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public void run(Evento e){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("switch ( e ) {");
    _builder.newLine();
    {
      EList<Transicion> _transiciones = dispositivo.getTransiciones();
      for(final Transicion transicion : _transiciones) {
        _builder.append("\t\t\t\t");
        _builder.append("case \"");
        Evento _evento = transicion.getEvento();
        String _name_4 = _evento.getName();
        _builder.append(_name_4, "\t\t\t\t");
        _builder.append("\":");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t\t\t");
        _builder.append("\t");
        _builder.append("estadoActual = new ");
        Estado _estado = transicion.getEstado();
        String _name_5 = _estado.getName();
        _builder.append(_name_5, "\t\t\t\t\t");
        _builder.append(" ");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t\t\t");
        _builder.append("break;");
        _builder.newLine();
      }
    }
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    {
      EList<Estado> _estados = dispositivo.getEstados();
      for(final Estado estado : _estados) {
        _builder.append("private class ");
        String _name_6 = estado.getName();
        _builder.append(_name_6, "");
        _builder.append(" implements ");
        String _name_7 = dispositivo.getName();
        _builder.append(_name_7, "");
        _builder.append("I{");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("public void handle(){");
        _builder.newLine();
        {
          EList<AbstractElement> _elementos = estado.getElementos();
          for(final AbstractElement ele : _elementos) {
            {
              if ((ele instanceof Variable)) {
                {
                  Expression _expression = ((Variable)ele).getExpression();
                  if ((_expression instanceof IntConstant)) {
                    _builder.append("\t\t");
                    _builder.append("int ");
                    String _name_8 = ((Variable)ele).getName();
                    _builder.append(_name_8, "\t\t");
                    _builder.append(" = ");
                    Expression _expression_1 = ((Variable)ele).getExpression();
                    int _value_1 = ((IntConstant) _expression_1).getValue();
                    _builder.append(_value_1, "\t\t");
                    _builder.append(";");
                    _builder.newLineIfNotEmpty();
                  }
                }
                {
                  Expression _expression_2 = ((Variable)ele).getExpression();
                  if ((_expression_2 instanceof StringConstant)) {
                    _builder.append("\t\t");
                    _builder.append("String ");
                    String _name_9 = ((Variable)ele).getName();
                    _builder.append(_name_9, "\t\t");
                    _builder.append(" = \"");
                    Expression _expression_3 = ((Variable)ele).getExpression();
                    String _value_2 = ((StringConstant) _expression_3).getValue();
                    _builder.append(_value_2, "\t\t");
                    _builder.append("\";");
                    _builder.newLineIfNotEmpty();
                  }
                }
                {
                  Expression _expression_4 = ((Variable)ele).getExpression();
                  if ((_expression_4 instanceof BoolConstant)) {
                    _builder.append("\t\t");
                    _builder.append("boolean ");
                    String _name_10 = ((Variable)ele).getName();
                    _builder.append(_name_10, "\t\t");
                    _builder.append(" = ");
                    Expression _expression_5 = ((Variable)ele).getExpression();
                    String _value_3 = ((BoolConstant) _expression_5).getValue();
                    _builder.append(_value_3, "\t\t");
                    _builder.append(";");
                    _builder.newLineIfNotEmpty();
                  }
                }
              }
            }
          }
        }
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("}\t");
        _builder.newLine();
      }
    }
    _builder.append("\t");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compileI(final Dispositivo dispositivo) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package interfaces;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public interface ");
    String _name = dispositivo.getName();
    _builder.append(_name, "");
    _builder.append("I ");
    {
      Dispositivo _superType = dispositivo.getSuperType();
      boolean _notEquals = (!Objects.equal(_superType, null));
      if (_notEquals) {
        _builder.append("extends ");
        Dispositivo _superType_1 = dispositivo.getSuperType();
        String _name_1 = _superType_1.getName();
        _builder.append(_name_1, "");
        _builder.append(" ");
      }
    }
    _builder.append("{");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("public void handle();");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
}
